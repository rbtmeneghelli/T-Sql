Papel do senior não é apenas resolver problemas, mas de identificar quais problemas devem ser resolvidos.

1. Explique os princípios da orientação a objeto?
É um paradigma de programação baseado em interações entre unidades de software (objetos), tentando aproximar-se do mundo real.

2. Você conhece a arquitetura em três camadas?
O modelo de orientação a objeto promoveu a abstração, mudando os conceitos da linguagem estruturada. Com esta mudança de conceito, surgiu a arquitetura em três camadas, onde há a separação entre a camada de apresentação, camada de negócios e camada de dados. 

3. Você sabe o que são Design Patterns?
São soluções generalistas para problemas recorrentes durante o desenvolvimento de um software. São modelos de soluções abstratas de alto nível para resolver problemas comuns 
Padrões de criação: Builder, Prototype, Singleton, Abstract Factory
Padrões estruturais: Adapter, Bridge, Facade, Proxy
Padrões comportamentais: Iterator, Command, Observer, Strategy, Visitor
 
4. Você conhece DDD?
O Domain Driven Design é uma abordagem de desenvolvimento orientado a domínio, focando no entendimento da regra de negócio. A abstração nos domínios facilita o entendimento da regra de negócio juntamente com a linguagem ubíqua, ou seja, uma linguagem "comum".
 
5. Você conhece TDD?
Criado pelo engenheiro de software Kent Beck, o Test Driven Development (TDD) aborda o desenvolvimento orientado a teste. O TDD é um conceito promovido pelo Extreme Programming. 

6. Já ouviu falar em BDD?
Criado como uma resposta ao TDD, o Behavior Driven Development (BDD), promove a colaboração entre desenvolvedores, profissionais relacionados ao negócio e o setor de qualidade de software. Criando testes voltados aos cenários do negócio, estreitando a comunicação entre as equipes. 

7. Você conhece SCRUM ?
Foi concebido como um estilo de gerenciamento de projeto em montadoras de automóveis. O SCRUM é um framework que promove uma interação entre a equipe, visando a gestão de projetos e o desenvolvimento ágil. As entregas são dívidas em cíclos (sprints), onde o KanBam e o Gráfico de Burndown são ferramentas utilizadas. 

8. Você conhece ORM?
O mapeamento de objeto relacional é uma técnica que promove a abstração do banco de dados, onde objetos do banco de dados relacionais (tabelas) são representados por classes e os seus registros por instâncias. A abstração do banco de dados possibilita que a aplicação utilize qualquer banco de dados. 
Framework ORM:  Entity framework, Nhibernate, Linq2Db e o micro ORM Dapper 

9. Você conhece SOA?
A arquitetura orientada a serviços, envolve a orquestração e disponibilização de serviços por meio de barramento (ESB - Enterprise Service BUS). O apoio desta arquitetura promove a governança que impacta diretamente em pessoas, processos e produtos.
 
10. O que é orientação a aspecto?
É um paradigma de programação que tem como princípio a separação de interesses. Possibilita que todo código secundário seja encapsulado e modularizado, ou seja, o crosscutting (ex: log, cache e segurança).Frameworks: Java - AspectJ, NET - Post Sharp, Mono - Cecil
 
11. Qual foi o maior motivador para reescrever o Asp.Net na versão core?
Entregar uma tecnologia multiplataforma compatível com aplicações em nuvem e containers.
 
12. Qual a diferença de acoplamento fraco e um acoplamento forte?
Acoplamento forte depende de muitas outras classes para fazer o servico e também é mais difícil de manter e ser usada. 
Acoplamento fraco não depende de muitas classes para fazer o que precisa fazer 

13. Qual a diferença de boxing para unboxing?
Processo de conversão Boxing e passar um tipo valor para tipo objeto ( object, String ou array) implícito 
Processo de conversão unboxing passa o tipo objeto para tipo valor. Explícito
 
14. Diferença entre um domínio anemico e um domínio rico 
Domínio  anemico é quando temos uma entidade sem validação, métodos e construtores. 
Domínio rico e quando temos validação, métodos ou construtores em uma entidade
 
15. O que é injeção de dependência?
E uma técnica de programação usada para tornar uma classe independente de seus dependências.O padrão de injeção de dependência visa remover dependências desnecessárias entre as classes, fazendo que as aplicações tenham um baixo acoplamento e uma alta coesão. Com isso a classe injetada só precisa saber do contrato definido pela interface ou classe abstrata. Tornando as independente dos objetos
 
16. Diferença de interface e classe abstrata
Uma classe abstrata pode conter um código pré definido que pode ou não ser sobrescrito lá na frente.
Uma interface específica quais os métodos que devem ser implementados por uma classe concreta.

17. Quais os tipos de serviço da injeção de dependência?
Transient - são criados cada vez que são solicitados.
Scoped - são criados em cada solicitação (uma vez por solicitaçao do cliente)
Singleton - são criados uma vez durante a vida útil da aplicação.

18. Quais são os verbos ou métodos do protocolo HTTP?
Get >> faz uma requisição a um recurso especificado de um endpoint disponibilizado por um erp, webservice ou webapi, retornando um resultado em formato Json ou XML.
Post >> Envia uma entidade e requisita que o servidor aceita-a como subordinada do recurso identificado a ser processado para que seja inserido.
Delete >> envia uma entidade e requisita que o servidor aceite-a para que seu recurso seja apagado.
Put >> Envia uma entidade e requisita que o servidor aceita-a como subordinada do recurso identificado a ser processado para que seja alterado.
Patch >> Envia uma entidade e requisita que o servidor aceita-a como subordinada do recurso identificado a ser processado para que seja alterado de forma parcial.

19. O que é uma arquitetura monolitica?
E um sistema único, não dividido, que roda em um único processo, sendo composto por uma aplicação, na qual diferentes componentes estão ligados à um único programa dentro de uma única plataforma.

20. O que é uma arquitetura microservico?
Consiste em uma coleção de pequenos serviços autônomos distribuídos, onde cada serviço é independente e deve implementar uma única funcionalidade em um contexto limitado

21. O que é o padrão repository?
Esse padrão separa a lógica de acesso a dados e mapeia essa lógica para entidades na lógica de negócio.A comunicação é feita via interfaces entre as entidades de domínio e a lógica de acesso a dados.

22. quais são os pilares fundamentais da OOP?
Estado, comportamento, abstração, herança, polimorfismo, encapsulamento

23. o que é SOLID?
SOLID são princípios que nos ajudam organizar funções e estrutura de dados em classes e como interconecta-las.

24. o que é ETL?
São ferramentas para extracao/carga de dados de um banco de dados, arquivo ou etc... para outra fonte de dados.

25. O que dizer quando pedirem uma estimativa?
Posso dar um retorno depois. Dizer isso para analisar riscos de mudanças e impactos que o item irá causar.

26. O que é a LINQ?
A language integrated query é um poderoso conjunto de tecnologias e recursos para consulta de objetos, banco de dados relacional, XML, entidades e outras fontes de dados a partir da linguagem C#

27. O que é generics no C#?
Generics apresentam conceito de parâmetros de tipo para .NET que possibilita a criação de classes e métodos que adiam a especificação do tipo que será utilizado

28. Qual a diferença do comando LINQ First vs Single?
O First retorna o primeiro elemento, independente da qtde de dados.O Single retorna um elemento, desde que seja único na lista. Se houver mais de um elemento ocorrerá erro.

29. Explique sobre EF Core ORM?
O mapeamento do objeto relacional no NET, permitindo interagir com banco de dados via código sem precisar efetuar consultas SQL.

30. O que é a arquitetura BFF (backend for frontend)?
O bff é uma arquitetura que possui um API gateway para cada interface do usuário, onde esse API gateway faz o redirecionamento para o microservico de destino requisitado pelo usuário para atendimento da nossa interface.
Com isso teremos além de API gateway, temos uma API específica para cada interface

31. Faça um overview sobre a arquitetura SAGA? 
Arquitetura SAGA é um orquestrados de eventos que segue em frente, caso o evento anterior tenha sucesso, senão ele pode ser desfeito caso algo no meio do caminho implique em questão de negócio.

32. Faça um overview sobre DEVOPS?
1 - DEVOPS e um conjunto de práticas que tem como objetivo de integrar as equipes de dev e infra em todos os processos de um sistema.2 - E uma abordagem baseada em capacidades técnicas, processo e culturais que impulsionam uma maior entrega de software e desempenho organizacional.

33. O que é memória leak?
E um vazamento de memória que ocorre quando um programa aloca memória para uso, porém não a libera quando não é mais necessária. Ex: referência a objetos que não são utilizados mais

34. O que são Design Patterns?
São soluções reutilizáveis para problemas comuns de design em software. São abordagens comprovadas para resolver desafios frequentes no dev.

35. O que é a lei de demeter?
E um princípio de design de software que visa reduzir o acoplamento entre objetos e aumentar a coesão do código.

36. O que diz o DIP do Solid?
Depender de abstrações e não de implementações.Utiliza interfaces, ao invés de classes concretas.

37. Porque houve a troca do EF para Ef Core?
Porque o EF Core e um framework multiplataforma mais leve e extensível em comparação ao EF.

38. Para que serve o index do SQL?
O index é um recurso para ordenar os dados em uma determinada sequência, tornando o resultado da consulta mais eficiente.

39. Quais são as características de uma boa arquitetura?
Organização, legibilidade, manutenção e testes

40. Quais são os estilos em camada?
Camada de apresentação, Camada de negócios, Camada de persistência, Camada de dados

41. Diferença de escabilidade vertical com a escabilidade horizontal?
Escabilidade vertical envolve adicionar mais recursos (CPU, memória, armazenamento) em um único no.
Escabilidade horizontal envolve adicionar mais nós ao sistema. (Distribuindo a carga de trabalho entre eles)

42. Qual é o principal objetivo do DDD?
Alinhar o design do software com o domínio do negócio, a fim de criar um modelo comum entre devs e especialistas para compreensão e representação das regras de negócio do software.

43. O que é a arquitetura MVVM?
E uma forma melhorada do conceito de MVC, adicionando mais uma camada de comunicação entre a camada de apresentação e a camada de negocios.

44. Qual a diferença da arquitetura MVC e MVVM?
A diferença do MVC e MVVM e a introdução do componente ViewModel e que a viewModel fica responsavel exclusivamente pela logica de apresentação e estado da view, e a view fique focada apenas exibiçãoe interação do usuario.

45. Qual e o principal objetivo da Arquitetura Limpa no contexto de dev de software?
(Visa a construção de sistemas com alta coesão, baixo acoplamento e separação de responsabilidades)E focado na organização do codigo para criar sistema escalavelis, flexivieis e de facil manutenção.A partir de organização do codigo e separação de responsabilidades em camadas bem definidas e independentes.

46. O que é uma execução diferida na LINQ pelo C#?
E quando uma consulta não é enviada imediatamente ao banco quando é construída. Essa consulta permanece em stand by na memória até que seus resultados sejam exigidos via método ToList, First, Last, Count ou etc...

47. O que é um webhook?
E o envio de notificação entre aplicações baseado em eventos. Ex: alteração de pagamento, pedido e etc...

//------------------------------------------------------------------------------------------------------------------------------//

View do sql e uma tabela virtual formada por dados vindos de tabelas relacionadas numa query. 
Tuplas e uma estrutura de dados com múltiplos elementos de diferentes tipos. 
Variável Double tem mais desempenho, decimal tem mais precisão. 
Os ORM permitem que a interação com os dados armazenados em bancos de dados relacionais sejam trabalhados com objetos fortemente tipados
A função rxjs map é 70% mais eficiente que o foreach para varrer um array

FluentApi - são as configurações da classe mapping de uma entidade que será criada a partir do migration
DataAnnotation - são configurações definidas na própria entidade que será criada a partir do migration

Os métodos assíncronos tem melhor rendimento, pois eles executam várias solicitações de forma simultânea, sem necessidade de aguardar a finalização de um processo para poder iniciar outro como é feito da forma sincrona

A serializacao é o processo de converter um objeto em um fluxo de bytes para armazenar o objeto ou transmiti-lo para a memória, banco de dados ou arquivo. O processo contrário e a deserializacao

Arquitetura de software define o que é o sistema em termos computacionais e o relacionamento entre os componentes

Redundância de dados no banco de dados deve ser evitada, ou seja, duplicação de dados em tabelas. Evitar a redundância para compartilhamento de dados.

Aplicação de herança e válido quando temos uma situação de algo que é alguma coisa. Exemplo de classes e superclasses:Cafeteira e um eletrodomésticoCarro e um veículoCachorro e um animalFuncionário e uma pessoa

Lista Ienumerable não permite alteração, somente leitura. Tipo list permite alteração

Entity framework tem bom desempenho para funcionalidades básicas do sql. ADO NET tem melhor desempenho para funcionalidades mais complexas, tipo relatorio

O NET upgrade assistant é uma ferramenta que ajuda a atualização do projeto para versão mais recente

Array tem melhor desempenho de memoria do que lists 

Tipos de armazenamento no frontend:Sessionstorage, localstorage e indexeddb

O github copilot oferece sugestões de preenchimento automático de um programador (IA) a medida que o código vai sendo criado.

Site >> plataform.openai.comSite >> landscape.cncf.io

Na funcionalidade assistants API conseguimos fazer conexão com as funcionalidades do chatgpt via API. Ideal para ser utilizado em chat de e-commerce
>> criar Acesso no dashboard>> criar assistente>> texto instrução - E um resumo da ação do bot>> modelo - gpt4o>> file search - faz upload do arquivo

Método task.whenAll vs task.whenEach 
- o primeiro aguarda a execução de todas as tasks para depois exibir o resultado.
- o segundo executa as tarefas de forma assíncrona exibindo seu resultado após a sua conclusão.